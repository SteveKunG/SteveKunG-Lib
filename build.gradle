import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
import org.jetbrains.gradle.ext.Gradle

plugins {
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
    id "com.gtnewhorizons.retrofuturagradle" version "1.3.26"
    id "io.github.CDAGaming.cursegradle" version "1.6.1"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
java.toolchain.vendor.set(JvmVendorSpec.AZUL)

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = project.minecraft_version

    mcpMappingChannel = project.mcp_mapping_channel
    mcpMappingVersion = project.mcp_mapping_version

    if (project.hasProperty("username")) {
        username = project.username
    }

    def customJvms = [
            "-Dfml.coreMods.load=stevekung.mods.stevekunglib.core.SteveKunGLibPlugin",
            "-Dmixin.hotSwap=true",
            "-Dmixin.checks.interfaces=true",
            "-Dmixin.debug.export=true",
            "-Dmixin.debug.verbose=true"
    ]

    extraRunJvmArguments.addAll(customJvms)
    useDependencyAccessTransformers = true
}

// Generate a project.group.Tags class
tasks.injectTags.configure {
    outputClassName.set("${project.group}.Tags")
}

repositories {
    maven {
        name "SpongePowered"
        url "https://repo.spongepowered.org/repository/maven-public/"
        content {
            includeGroup "org.spongepowered"
        }
    }
    maven {
        name "MixinBooter"
        url "https://maven.cleanroommc.com/"
        content {
            includeGroup "zone.rong"
        }
    }
    mavenLocal()
}

dependencies {
    // Mixin Booter beyond 8.3 doesn't work in dev
    implementation(annotationProcessor("zone.rong:mixinbooter:${project.mixin_booter_version}"))

    String mixin = modUtils.enableMixins("org.spongepowered:mixin:${project.mixin_version}", "mixins.stevekung's_lib.refmap.json")
    annotationProcessor "org.ow2.asm:asm-debug-all:5.2"
    annotationProcessor "com.google.guava:guava:32.0.0-android"
    annotationProcessor "com.google.code.gson:gson:2.8.9"
    annotationProcessor(api(mixin)) {
        transitive = false
    }
}

// Adds Access Transformer files to tasks
for (File at : sourceSets.named("main").get().resources.files) {
    if (at.name.toLowerCase().endsWith("_at.cfg")) {
        tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
        tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}

String fileName = "${project.archives_base_name}-mc${project.minecraft_version}"

jar {
    from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } })
    manifest {
        attributes("FMLAT": "stevekunglib_at.cfg",
                "FMLCorePluginContainsFMLMod": "true",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "FMLCorePlugin": "stevekung.mods.stevekunglib.core.SteveKunGLibPlugin",
                "ForceLoadAsMod": "true"
        )
    }
    archiveBaseName = fileName
    archiveVersion = "v" + project.mod_version
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

tasks.register("sourcesJar", Jar) {
    from sourceSets.main.allSource
    archiveBaseName = fileName
    archiveClassifier = "sources"
    archiveVersion = "v" + project.mod_version
}

tasks.register("deobfJar", Jar) {
    from sourceSets.main.output
    manifest {
        attributes("FMLAT": "stevekunglib_at.cfg",
                "FMLCorePluginContainsFMLMod": "true",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "FMLCorePlugin": "stevekung.mods.stevekunglib.core.SteveKunGLibPlugin",
                "ForceLoadAsMod": "true"
        )
    }
    archiveBaseName = fileName
    archiveClassifier = "deobf"
    archiveVersion = "v" + project.mod_version
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

def uploadDebug = true

curseforge {
    apiKey = project.hasProperty("curseforge_api_token") ? project.curseforge_api_token : ""
    project {
        id = "296019"
        changelog = rootProject.file("CHANGE_LOG.md")
        changelogType = "markdown"
        releaseType = "release"
        addGameVersion project.minecraft_version
        addGameVersion "Forge"

        mainArtifact(reobfJar) {
            it.displayName = fileName + "-v" + project.mod_version
            relations {
                it.requiredDependency "mixin-booter"
            }
        }
        addArtifact sourcesJar
        addArtifact deobfJar
    }
    options {
        debug uploadDebug
    }
}

tasks.curseforge.dependsOn(build)
jar.finalizedBy("reobfJar")

if (project.hasProperty("version_lib_dir")) {
    tasks.register("updateVersionLib") {
        group "upload"
        def versionFile = file("${version_lib_dir}/stevekung's_lib_version.json")
        def jsonBuilder = new JsonBuilder(new JsonSlurper().parseText(versionFile.text))
        def jsonElement = jsonBuilder.content
        def formattedList = []
        def modVersion = project.mod_version.substring(0, 5)

        jsonElement.promos."${mc_version}-latest" = modVersion
        jsonElement.promos."${mc_version}-recommended" = modVersion

        def reader = new BufferedReader(new FileReader(rootProject.file("CHANGE_LOG.md")))
        def line
        for (int ln = 0; (line = reader.readLine()) != null; ln++) {
            if (ln >= 2) {
                formattedList.add(line)
            }
        }

        jsonElement."${mc_version}"."${modVersion}" = formattedList.join("\n")
        versionFile.text = jsonBuilder.toPrettyString()
    }
}